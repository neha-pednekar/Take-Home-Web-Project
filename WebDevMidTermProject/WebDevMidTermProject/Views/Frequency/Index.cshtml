@model CodeModel

@{
    ViewData["Title"] = "Home Page";
    var count = 1;
}
<br />
<h2>Welcome to the secret code decoding interface</h2>
<br />

@using (Html.BeginForm("CheckFrequencyForm", "Frequency", FormMethod.Post, new{@id = "freqForm",@name = "freqForm" }))
{
    if (Model != null)
    {
        @Html.HiddenFor(m => m.MonogramsAlreadyOccupied, Model.MonogramsAlreadyOccupied)
    }

    <div class="form-group">
        @Html.LabelFor(m => m.InputSecretMessage)
        @Html.TextBoxFor(m => m.InputSecretMessage, new { @class = "form-control", @style = "width: 400px" })
        @Html.ValidationMessageFor(m => m.InputSecretMessage)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.StrategyModel.StrategyType)
        @Html.DropDownListFor(m => m.StrategyModel.StrategyType, new SelectList(Enum.GetValues(typeof(StrategyTypes))), "",
                                                                              new { @class = "form-control", @style = "width: 400px" })
        @Html.ValidationMessageFor(m => m.StrategyModel.StrategyType, "Please select a Strategy Type" , new { @style = "color:red"})
    </div>
    <div class="form-group">
        @Html.CheckBoxFor(m => m.DoesTheStringHaveWhitespaces, new { @class = "form-control", @id = "mychkbox1" })
        <label class="form-check-label" for="DoesTheStringHaveWhitespaces">Does the string have whitespaces?</label>
        @Html.ValidationMessageFor(m => m.DoesTheStringHaveWhitespaces, "", new { @style = "color:red" })
    </div>
    <div class="form-group">
        @Html.CheckBoxFor(m => m.DoesTheStringHaveSpecialCharacters, new { @class = "form-control", @id = "mychkbox2" })
        <label class="form-check-label" for="DoesTheStringHaveSpecialCharacters">Does the string have special characters?</label>
        @Html.ValidationMessageFor(m => m.DoesTheStringHaveSpecialCharacters,"", new { @style = "color:red" })
    </div>
    <br />
    @if (Model != null && !String.IsNullOrWhiteSpace(Model.OutputDecodedMessage))
    {
        <div class="form-group">
            @Html.LabelFor(model => model.OutputDecodedMessage)
            <p style="color:#3498db; word-wrap:break-word">@Model.OutputDecodedMessage</p>
        </div>
    }
    <br />
    <br />
    @Html.AntiForgeryToken()
    <button type="submit" class="btn btn-primary">Check Frequency for the Entered Code</button>
    <br />
    <br />
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
        Frequency Analysis
    </button>

    <!-- Modal -->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Character</th>
                                <th scope="col">Number of Occurences</th>
                                <th scope="col">Frequency Percentage</th>
                            </tr>
                        </thead>
                        <tbody>

                            @if (ViewData["MonogramTableView"] != null)
    {
                        @foreach (var monogramData in ViewData["MonogramTableView"] as IList<MonogramDataModel>)
{
                        <tr>
                            <td scope="row">@(count++)</td>
                            <td>@monogramData.Character</td>
                            <td>@monogramData.NumberOfOccurences</td>
                            <td>@monogramData.Percentage</td>
                        </tr>

}
}

                            @if (ViewData["BigramTableView"] != null)
    {
                        @foreach (var bigramData in ViewData["BigramTableView"] as IList<BigramDataModel>)
{
                        <tr>
                            <td scope="row">@(count++)</td>
                            <td>@bigramData.BigramSequence/td>
                            <td>@bigramData.NumberOfOccurences</td>
                            <td>@bigramData.Percentage</td>
                        </tr>

}
}

                            @if (ViewData["TrigramTableView"] != null)
    {
                        @foreach (var trigramData in ViewData["TrigramTableView"] as IList<TrigramDataModel>)
{
                        <tr>
                            <td scope="row">@(count++)</td>
                            <td>@trigramData.TrigramSequence/td>
                            <td>@trigramData.NumberOfOccurences</td>
                            <td>@trigramData.Percentage</td>
                        </tr>

}
}


                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}